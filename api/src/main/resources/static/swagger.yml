openapi: 3.0.3
info:
  title: Employee API
  version: 1.0.0
  description: Swagger spec for Employee Service

servers:
  - url: http://localhost:8111
    description: Local server

paths:

  /employees:
    get:
      summary: Get All Employees
      responses:
        '200':
          description: Success – list of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service Unavailable (Circuit Breaker)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create new employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEmployeeRequest'
      responses:
        '201':
          description: Employee created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '400':
          description: Validation Failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service Unavailable (Circuit Breaker)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/{id}:
    get:
      summary: Get Employee by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Employee found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service Unavailable (Circuit Breaker)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete employee by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content – Deleted successfully
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service Unavailable (Circuit Breaker)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/search/{name}:
    get:
      summary: Search employees by name
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of matching employees or empty
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service Unavailable (Circuit Breaker)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/topTenHighestEarningEmployeeNames:
    get:
      summary: Top 10 highest earning employees names
      responses:
        '200':
          description: Returns up to 10 names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service Unavailable (Circuit Breaker)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/highestSalary:
    get:
      summary: Get highest salary among employees
      responses:
        '200':
          description: Integer salary
          content:
            application/json:
              schema:
                type: integer
        '404':
          description: Not Found – no employees to calculate salary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service Unavailable (Circuit Breaker)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:

    Employee:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        salary:
          type: integer
        age:
          type: integer
        title:
          type: string
        email:
          type: string

    NewEmployeeRequest:
      type: object
      properties:
        name:
          type: string
        salary:
          type: integer
        age:
          type: integer
        title:
          type: string
      required:
        - name
        - salary
        - age
        - title

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        details:
          type: string

    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            fieldErrors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string

